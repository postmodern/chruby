#!/bin/bash

. ./test/helper.sh

function log {
	if [[ -t 1 ]]; then
		printf '%b\n' "\x1b[1m\x1b[32m>>>\x1b[0m \x1b[1m\x1b[37m$1\x1b[0m"
	else
		printf '%s\n' ">>> $1"
	fi
}

function error {
	if [[ -t 1 ]]; then
		printf '%b\n' "\x1b[1m\x1b[31m!!!\x1b[0m \x1b[1m\x1b[37m$1\x1b[0m" >&2
	else
		printf '%s\n' "!!! $1" >&2
	fi
}

function fail {
	error "$1"
	exit -1
}

function download {
	if type -P wget >/dev/null; then
		wget -c -O "$2" "$1"
	elif type -P curl >/dev/null; then
		curl -L -C - -o "$2" "$1"
	else
		error "Could not find curl or wget"
		return 1
	fi
}

function read_release {
	{ IFS= read; while IFS== read -r ident val; do
		case "${ident#DISTRIB_}" in
			(ID) system_name="$val" ;;
			(RELEASE) system_version="$val" ;;
			# SuSE-release, os-release
			(VERSION*) system_version="$val" ;;
			# SuSE-release
			(PATCHLEVEL) system_version+=".$val" ;;
		esac
	done } < "$1"
	printf '%s\n' "system_name=$system_name; system_version=$system_version"
}

function detect_system {
  system_type="unknown"
  system_name="unknown"
  system_version="unknown"
  system_arch="$(uname -m)"

  case "$(uname)" in
    (Linux|GNU*)
      system_type="linux"

      for rls in /etc/*-release; do
	  rls_file="${rls#/etc/}"
	  rls_file="${rls_file%-release}"
	  case "${rls_file}" in
	    (arch)
	      read_release /etc/os-release
	      read -r line < <(ldd --version)
	      system_version="libc-${line##* }"
	      break
	      ;;
	    (centos)
	      system_name="centos"
	      read -r line < /etc/centos-release
	      system_version="${line##* }"
	      break
	      ;;
	    (lsb)
	      read_release /etc/lsb-release
	      break
	      ;;
	    (fedora)
	      system_name="fedora"
	      read -r line < /etc/fedora-release
	      system_version="${line##* }"
	      break
	      ;;
	    (gentoo)
	      system_name="gentoo"
	      read -r ver < /etc/gentoo-release
	      system_version="${ver##* }"
	      break
	      ;;
	    (os)
	      read_release /etc/os-release
	      system_arch="$( dpkg --print-architecture )"
	      break
	      ;;
	    (redhat)
	      read -r line < /etc/redhat-release
	      if [[ "$name" == *"CentOS"* ]]; then
		system_name="centos"
	      else
		system_name="redhat"
	      fi
	      system_version="${line##* }"
	      break
	      ;;
	    (SuSE)
	      read_release /etc/SuSE-release
	      system_name="suse"
	      break
	      ;;
	    (system)
	      read -r line < /etc/system-release
	      system_version="${line##* }"
	      [[ "$line" == *"Amazon Linux AMI"* ]] && system_name="amazon"
	      break
	      ;;
	    (*)
	      read -r system_version < <(ldd --version)
	      system_version="${system_version##* }"
	      ;;
	  esac
      done
      # special cases
      if [[ "$system_name" == "unknown" ]]; then
	if [[ -s /etc/debian_version ]]; then
	  system_name="debian"
	  read -r line < /etc/debian_version
	  system_version="${line%.*}"
	  system_arch="$( dpkg --print-architecture )"
	fi
      fi
      # sanitize some names
      case "$system_name" in
	(Ubuntu)
	  system_name="ubuntu"
	  system_arch=$( dpkg --print-architecture )
	  ;;
	(LinuxMint)
	  system_name="mint"
	  system_arch=$( dpkg --print-architecture )
	  ;;
	(ManjaroLinux)
	  system_name="manjaro"
	  ;;
      esac
      ;;
    (SunOS)
      system_type="sunos"
      system_name="solaris"
      system_version="$(uname -v)"

      if [[ "${system_version}" == joyent* ]]; then
        system_name="smartos"
        system_version="${system_version#* }"
      elif [[ "${system_version}" == oi* ]]; then
        system_name="openindiana"
        system_version="${system_version#* }"
      fi
      ;;

    (OpenBSD)
      system_type="bsd"
      system_name="openbsd"
      system_version="$(uname -r)"
      ;;

    (Darwin)
      system_type="darwin"
      system_name="osx"
      system_version="$(sw_vers -productVersion)"
      system_version="${system_version%.*}"
      ;;

    (FreeBSD)
      system_type="bsd"
      system_name="freebsd"
      system_version="$(uname -r)"
      system_version="${system_version%%-*}"
      ;;

    (*)
      return 1
      ;;
  esac

  system_type="${system_type//[ \/]/_}"
  system_name="${system_name//[ \/]/_}"
  system_version="${system_version//[ \/]/_}"
  system_arch="${system_arch//[ \/]/_}"
  system_arch="${system_arch/amd64/x86_64}"
  system_arch="${system_arch/i[0-9]86/i386}"
}

detect_system || fail "Cannot auto-detect system type"

[[ "$system_name" == "unknown" ]] && fail "Could not detect system name"
[[ "$system_version" == "unknown" ]] && fail "Could not detect system version"
[[ "$system_arch" == "unknown" ]] && fail "Could not detect system arch"
test_ruby_archive="$test_ruby_engine-$test_ruby_version-p$test_ruby_patchlevel.tar.bz2"
test_ruby_url="http://rvm.io/binaries/$system_name/$system_version/$system_arch/$test_ruby_archive"
test_ruby_root="$test_ruby_engine-$test_ruby_version-p$test_ruby_patchlevel"

mkdir -p test/rubies
cd test/rubies

log "Downloading $test_ruby_url ..."
download "$test_ruby_url" "$test_ruby_archive" || fail "Download failed"

log "Unpacking $test_ruby_archive ..."
tar -xjf "$test_ruby_archive" || fail "Unpacking failed"
